/**
 * 1. 소스 코드 평가 -> (평가 결과) -> 실행 컨텍스트
 * 2. 실행 컨텍스트 -> (실행에 필요한 정보) -> 소스 코드 실행
 * 3. 소스 코드 실행 -> (실행 결과) -> 실행 컨텍스트
 */

// 소스코드 실행
var x;
x = 1;

// 실행 컨텍스트
// x undefined

// =>
// 실행 컨텍스트
// x 1
// 실행 컨텍스트
// 1. 전역 실행 컨텍스트 : 가장 먼저 전역 코드 평가 과정을 거치면서, 전역 코드를 실행하기 위한 준비.
// 런타임 이전에 전역 변수 선언문, 함수 선언문을 먼저 실행함.
// 특히 var 키워드로 선언된 전역 변수는 전역객체의 프로퍼티, 전역 함수는 메서드로 들어간다!

// 2. 전역 코드 실행
//전역 코드 평가 과정이 끝나면, 전역 코드를 순차적으로 실행.
// 함수 호출 시 전역 코드 실행은 중단, 함수 내부로 들어가면서 함수 코드 평가로 들어감.

// 3.함수 코드 평가
// 함수 내부 문을 실행하기 앞서, 코드 평가 과정을 거친다.
// 지역 선언 문을 먼저 실행함.
// 함수 실행 스코프의 지역 스코프에 등록
// 지역 변수처럼 사용할 수 잇는 arguments객체가 생성, this바인딩도 결정한다.

/**
 * 렉시컬 환경(Lexical Enviornment)은 식별자와 식별자에 바인딩된 값, 상위 스코프에 대한 참조를 기록하는 자료구조
 * 실행 컨텍스트를 구성하는 요소이다.
 * 식별자와 식별자에 바인딩된 값
 * => const x = 1; // 렉시컬 환경에 바인딩.
 * 상위 스코프에 대한 참조를 기록(스코프 체인)
 * 렉시컬 환경은 실행 컨텍스트를 구성하는 하나의 요소이다.
 *
 * 렉시컬 스코프와 렉시컬 환경은 다른의미
 * 렉시컬 스코프 : 함수가 어디에 정의되었는지에 따라 상위 스코프가 결정됨
 * 처음에는 LexicalEnvironment와 VariableEnvironment가 생성됨
 * LexicalEnviroment와 VariableEnvironment는 같은 LexicalEnvironment를 가리킴.
 *
 * 근데 몇가지 상황 이후 VariableEnvironment 컴포넌트 내용이 달라짐.
 *
 * 환경 레코드(Environment Record) : 식별자와 식별자에 바인딩된 값을 등록
 *   Declarative Environment Record : var 키워드 전역변수, 함수 선언문를 제외한 나머지를 저장함.(전역 객체의 프로퍼티로 저장하지 않는 경우)
 *   Object Environment Record : var 키워드 전역변수, 함수 선언문
 * 외부 렉시컬 환경에 대한 참조(OuterLexicalEnviromentReference): 상위 스코프(전역 실행 컨텍스트의 경우 null)
 */

var x = 1;
const y = 2;

function foo(a) {
    var x = 3;
    const y = 4;

    function bar(b) {
        const z = 5;
        console.log(x + y + z + a + b);
    }

    bar(10);
}

foo(20);

// 전역 실행 컨텍스트 생성
// 전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트의 렉시컬 환경에 바인딩.
// var키워드 전역 변수 x를 선언 후 초기화
// 전역 실행 컨텍스트의 Lexical Environment내 Object Environment Record에 등록함. foo함수도 동일함. (var키워드의 전역변수는 전역객체의 프로퍼티이기 때문에)
// 전역 실행 컨텍스트의 경우 상위 스코프가 없기 때문에 OuterLexicalEnvironmentReference에 null을 바인딩함.
// const 키워드의 전역변수는 전역 실행컨텍스트 렉시컬 환경 내 Declarative 환경 레코드에 등록함.

// 전역 코드 실행
// foo(20)를 실행하게 되면 전역 코드 실행은 중단되게 되고, 함수 foo의 컨텍스트를 생성함.
// foo함수의 변수 x를 렉시컬 환경의 객체 환경 레코드를 객체 환경 레코드에 등록
// const변수는 선언적 환경 레코드에 등록
// 상위 스코프의 경우 전역 실행 컨텍스트를 가리킴. -> 외부 렉시컬 환경에 대한 참조(전역 실행 컨텍스트)
// this 바인딩 -> 함수의 호출방식에 따라 달라질듯(객체의 메서드, 클래스, 생성자 함수[[construct]], 일반 함수([[caller]]))

// 전역 코드 평가 : 전역 변수 선언문, 함수 선언문을 런타임 이전에 생성하고, 전역 실행 컨텍스트를 생성함.
// 전역 실행 컨텍스트
//   전역 렉시컬 환경
//     전역 환경 레코드 -> 식별자와 식별자에 바인딩된 값(변수)를 저장한다.
//        전역 객체 환경 레코드 -> var키워드 사용한 전역변수, 전역 함수 선언문 등... BindingObject -> window
//        전역 선언적 환경 레코드 -> let const등 ES6에서 지원한 전역 변수 선언, ...
//        전역 this binding -> 함수의 호출 방식에 따라 전역 객체가 될 수 있고, 내 자신을 포함하는 객체, 인스턴스를 가리키죠.
//     외부 렉시컬 환경에 대한 참조 -> 상위 스코프를 참조하는데, 참조할 상위 스코프가 없으면 NULL으로 바인딩 됨.

// 전역 코드 실행
// 전역 실행 컨텍스트의 렉시컬 환경 내 객체 환경 레코드와 선언적 환경 레코드의 식별자에 값을 할당함.

// 함수 코드 평가
// 함수 실행 컨텍스트 생성
// 함수 실행 컨텍스트
//   -> 함수 렉시컬 환경
//     -> 함수 환경 레코드
//     -> this Binding (일반 함수일 경우 window객체를 가리킴)
//   -> OuterLexicalEnvironmentReference는 상위 스코프(전역 렉시컬 환경)을 참조함.
