/**
 * 함수
 * 수학에서의 함수는 값을 입력받아 출력하는 과정을 의미함.
 * 쉽게 말하자면 기계에 재료를 넣고 산출물을 생성한다.
 */

// 함수 선언문
// 함수 선언문은 함수 이름을 생략할 수 없다.
function add(x, y) {
  // (x, y) => 함수 매개변수
  // 함수 몸체
  return x + y; // 반환
}

// 함수 호출 => 필요한 매개변수를 전달해야함.
const result = add(1, 2); // return 1 + 2;
console.log(result);

/**
 * 함수는 한번 정의를 하면, 언제든지 여러번 호출할 수 있음. => 코드의 재사용이 용이함.
 * => 유지보수의 편의성을 높이고, 코드의 신뢰성을 높일 수 있음.
 * 함수는 객체 타입의값으로 식별자를 붙일 수 있음.
 */

// 함수 리터럴[함수 표현식]
// 변수에 함수 리터럴을 할당한다.
// 함수명 생략 가능(익명 함수) => 함수 선언문은 이름을 생략할 수 없다.
// 매개변수는 소괄호에 0개 이상 입력이 가능하며 콤마를 이용하여 구분하고 순서가 중요함.
var f = function add(a, b) {
  // 함수를 호출할때 동작하는 블록문
  return a + b;
};

console.log(f(1, 5)); // 함수 표현식은 함수 객체를 가리키는 식별자를 통해 함수를 호출할 수 있다.

// function 생성자 함수 => 함수 생성
const f2 = new Function("x", "y", "return x + y");
console.log(f2(10, 20), f2);

// 화살표 함수(ES6)
// block문 생략 가능하며 아래와 같이 사용하면 return도 생략이 가능함.
// 기존 함수 표현식을 더 간단하게..
// eslint-disable-next-line no-undef
const fnArrow = (a, b) => {
  return a + b;
};

console.log(fnArrow(10, 20));
